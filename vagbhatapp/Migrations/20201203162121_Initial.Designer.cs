// <auto-generated />
using System;
using EntityFrameworkCore.Jet.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vagbhatapp.Data.Core;

namespace vagbhatapp.Migrations
{
    [DbContext(typeof(EntitiesContext))]
    [Migration("20201203162121_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("vagbhatapp.Data.Entities.Address", b =>
                {
                    b.Property<string>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullAddress")
                        .HasColumnType("longchar");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("AddressId");

                    b.HasIndex("PatientId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("vagbhatapp.Data.Entities.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Fees")
                        .HasColumnType("double");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("smallint");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentDate");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("vagbhatapp.Data.Entities.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PatientHistory")
                        .IsRequired()
                        .HasColumnType("longchar");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("PatientId");

                    b.HasIndex("MobileNumber");

                    b.HasIndex("PatientName");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("vagbhatapp.Data.Entities.Treatment", b =>
                {
                    b.Property<string>("TreatmentId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Complain")
                        .HasColumnType("longchar");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("longchar");

                    b.Property<string>("RxTreatment")
                        .HasColumnType("longchar");

                    b.HasKey("TreatmentId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("vagbhatapp.Data.Entities.Address", b =>
                {
                    b.HasOne("vagbhatapp.Data.Entities.Patient", "Patient")
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vagbhatapp.Data.Entities.Appointment", b =>
                {
                    b.HasOne("vagbhatapp.Data.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vagbhatapp.Data.Entities.Treatment", b =>
                {
                    b.HasOne("vagbhatapp.Data.Entities.Appointment", "Appointment")
                        .WithOne("Treatment")
                        .HasForeignKey("vagbhatapp.Data.Entities.Treatment", "TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
